/*
	MAGU Scanner/Parser
	Adrián Martínez A01280252
	Estefanía Guajardo A00813202
*/

// Para permitir el uso de variables y que los métodos no sean estáticos por default
options {
	STATIC = false ;
}


PARSER_BEGIN(magu)

import javax.swing.*; 
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.InputStream;
import java.io.InputStreamReader;

class magu extends TurtleGraphicsWindow
{
	public magu()
    { 
    	super( 600, 600 );
    }

     
	public static void main(String[] args) throws ParseException
	{
		try
		{
			magu scanner = new magu(System.in);
			scanner.Programa();
			System.out.println("OK!");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Error!");
		}
	}

	// Variable donde se guarda el valor de las expresiones
	int valorExp = 0;
	
	int variableLocal;
	Token nombreFuncActual;
	int insideWhile = 0;
	int boolEsToken = 0;
	String nombre = "empty"; //variable de Bool() para condicion1 
	String nombre2 = "empty"; //variable de Bool() para condicion2
	Token op; //variable de Bool() para comparador
	
}
PARSER_END(magu)

TOKEN:
{
		< TK_FORWARD : "forward" | "f" >		{}
	|	< TK_LEFT : "left" | "l" >				{}
	|	< TK_RIGHT : "right" | "r">				{}
	|	< TK_PENCILUP : "pencilup" | "pu" >		{}
	|	< TK_PENCILDOWN : "pencildown" | "pd" >	{}
	|	< TK_MOVE : "move" | "m" >				{}
	|	< TK_HOME : "home" | "h" >				{}
	|	< TK_CURVE : "curve" | "cv" >			{}
	|	< TK_INPUT : "input" | "in" >			{}
	|	< TK_PRINT : "print" | "pr" >			{}
	|	< TK_WHILE : "while" >					{}
	|	< TK_IF : "if" >						{}
	|	< TK_ELSE : "else" >					{}
	|	< TK_ARR : "arr" >						{}
	|	< TK_FUNC : "func" >					{}
	|	< TK_EQ: "=" >							{}
	|	< TK_NE: "<>" >							{}
	|	< TK_LT: "<" >							{}
	|	< TK_GT: ">" >							{}
	|	< TK_LPAR: "(" >						{}
	|	< TK_RPAR: ")" >						{}
	|	< TK_LBRACKET: "[" >					{}
	|	< TK_RBRACKET: "]" >					{}
	|	< TK_LBRACE: "{" >						{}
	|	< TK_RBRACE: "}" >						{}
	|	< TK_COMMA: "," >						{}
	|	< TK_PLUS: "+" >						{}
	|	< TK_MINUS: "-" >						{}
	|	< TK_MULT: "*" >						{}
	|	< TK_DIV: "/" >							{}	
	|	< TK_CTE_I : (["0"-"9"])+ >				{}
	|	< TK_ID :  ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])* > {}
	|   < TK_STRING : <QUOTE> (~["\r","\n","\"" ])+ <QUOTE> > {}
	|	< #QUOTE : "\"" >
}

SKIP:
{
	" "	| "\r\n" | "\t"
}

void Programa() : {}
{   
    ( Asignacion() )* ( Definicion_Func() )* ( Arreglo() )* Secuencia()  <EOF>
}

void Func() : { Token t; String s, s2; int value, value2; }
{
    ( 
    	  <TK_FORWARD> <TK_LPAR> value = Exp() <TK_RPAR> { forward(value); }
    	| <TK_LEFT> <TK_LPAR> value = Exp() <TK_RPAR> { left(value); }
    	| <TK_RIGHT> <TK_LPAR> value = Exp() <TK_RPAR> { right(value); }


    	| <TK_INPUT> <TK_LPAR> t = <TK_ID> <TK_RPAR>
    			{
    				// Crea un cuadro de dialogo. El input se guarda en la string s.
					s = (String)JOptionPane.showInputDialog(
			                    null, "Escribe el valor de " + t.image, "Input", JOptionPane.PLAIN_MESSAGE, null, null, null);

					// Si el campo quedo vacío o se cerró la ventana, mostrar mensaje de error y terminar ejecucion.
					if(s==null || s.trim().isEmpty()) {
						System.out.println("No se dio valor a la variable " + t.image);
						System.exit(0);
					}
					// De lo contrario asignar valor a variable.
					else {
						if (insideWhile == 1)
						{
							TablaBools.asignarValor(t.image,  Integer.parseInt( s ) );
						}
						TablaVariables.asignarValor(t,  Integer.parseInt( s ) );
					}
				}

    	| <TK_PRINT> <TK_LPAR> 

    			
    			( 
    			  LOOKAHEAD(2)
    			  t = <TK_ID> <TK_LBRACKET> value = Exp() <TK_RBRACKET> 
    			  				{ s = String.valueOf(TablaVariables.getValorArreglo(t,value)); } 
    			|
    			  t = <TK_ID> { if (variableLocal == 0 ) {s = String.valueOf(TablaVariables.getValor(t)); } 
									else {s = String.valueOf(TablaVariablesLocal.getValor(t)); }}
    			| t = <TK_STRING> {s = t.image.substring(1, t.image.length() - 1); } // Quitar las comillas
    			)
    			( <TK_PLUS> 
    				( 
    					LOOKAHEAD(2)
    			  		t = <TK_ID> <TK_LBRACKET> value = Exp() <TK_RBRACKET> 
    			  				{ s2 = String.valueOf(TablaVariables.getValorArreglo(t,value)); s = s + s2; } 
    			  	|
    					t = <TK_ID> { if (variableLocal == 0 ) { s2 = String.valueOf(TablaVariables.getValor(t)); s = s + s2; }
									else { s2 = String.valueOf(TablaVariablesLocal.getValor(t)); s = s + s2; } }
    				| t = <TK_STRING> {s2 = t.image.substring(1, t.image.length() - 1); s = s + s2; }
    				) 
    			)*

    			<TK_RPAR>

    			{System.out.println(s);}

    	| <TK_PENCILUP> <TK_LPAR> <TK_RPAR> { penup(); }
    	| <TK_PENCILDOWN> <TK_LPAR> <TK_RPAR>  { pendown(); }
    	| <TK_MOVE> <TK_LPAR> value = Exp() <TK_COMMA> value2 = Exp() <TK_RPAR>  { setxy(value,value2); }
    	| <TK_CURVE> <TK_LPAR> value = Exp() <TK_COMMA> value2 = Exp() <TK_RPAR>  { arc(value,value2); }
    	| <TK_HOME> <TK_LPAR> <TK_RPAR>  { home(); }
    )   
}  

void Funcion() : {} 
{	
    <TK_ID> <TK_LPAR> ( ( Exp() ) ( <TK_COMMA> Exp() )* )? <TK_RPAR>
}

int Exp() : {int resultado; int term;}
{
	resultado = Termino()
	( 
		 <TK_PLUS>
		 term = Termino()
		 {resultado += term;}
		
		| 

		<TK_MINUS>
		term = Termino()
		{resultado -= term;}

		)*
	{return resultado;
	boolEsToken = 0;}
}

int Termino() : {int resultado; int fact;}
{
	resultado = Factor()
	( 
		 <TK_MULT>
		 fact = Factor()
		 {resultado *= fact;}
		
		| 

		<TK_DIV>
		fact = Factor()
		{resultado /= fact;}

		)*
	{return resultado;}
}

int Factor() : {Token t; int indice;}
{
	LOOKAHEAD(2)

	// Si es indice de arreglo, sacar su valor de la tabla de arreglos
	t = <TK_ID>
	<TK_LBRACKET> indice = Exp() <TK_RBRACKET>

		{
			return TablaVariables.getValorArreglo(t,indice);
		}

	|

	// Si el token es variable, sacar su valor de la tabla
	t = <TK_ID>
	{		
		if (insideWhile == 1)
		{
			boolEsToken = 1;
		}
		if (variableLocal == 0) 
			{
				return TablaVariables.getValor(t);
			}
		else if (variableLocal == 1)	
			{
				return TablaVariablesLocal.getValor(t);
			}
	}

	|

	// Si es constante, hacer parse a entero
	t = <TK_CTE_I>
	{
		if (insideWhile == 1)
		{
			boolEsToken = 0;
		}	
	}
	{return Integer.parseInt( t.image );}
}


void Asignacion() : { Token var; int valor; int indice;}
{
	LOOKAHEAD(2)
	var = <TK_ID>
	<TK_EQ> 
	valor = Exp()
	{
		if (variableLocal == 0) 
			{
				if (insideWhile == 1)
				{
					TablaBools.asignarValor(var.image, valor);
				}
				
				TablaVariables.asignarValor(var,valor);
			}
		else if (variableLocal == 1)	
			{	
				if (insideWhile == 1)
				{
					TablaBools.asignarValor(var.image, valor);
				}
				
				TablaVariablesLocal.asignarValor(var,valor, nombreFuncActual);
			}
	}

	|

	// Si se va a asignar un valor a un indice de arreglo
	var = <TK_ID> <TK_LBRACKET> indice = Exp() <TK_RBRACKET> <TK_EQ> valor = Exp()
	{
		TablaVariables.asignarValorArreglo(var,valor,indice);
	}
}


int Bool() : {int resultado; int exp;}
{
	resultado = Exp()
	( 
		{
			//si el primer valor en la condicion es un id lo guardamos en la tabla de bools
			if (boolEsToken == 1 && insideWhile == 1)
			{
				if (variableLocal == 0)
				{
					nombre = TablaVariables.getKey(resultado);
				}
				else if (variableLocal == 1)
				{
					nombre = TablaVariablesLocal.getKey(resultado);
				}
				
				TablaBools.asignarValor(nombre, resultado);
			}
			else 
			{
				TablaBools.asignarValor(nombre, resultado);
			}
			
		}
		op = <TK_LT>
		exp = Exp()
		{
			//si el segundo valor en la condicion es un id lo guardamos en la tabla de bools
			if (boolEsToken == 1 && insideWhile == 1)
			{
				if (variableLocal == 0)
				{
					nombre2 = TablaVariables.getKey(exp);
				}
				else if (variableLocal == 1)
				{
					nombre2 = TablaVariablesLocal.getKey(exp);
				}
				
				TablaBools.asignarValor(nombre2, exp);
			}
			else 
			{
				TablaBools.asignarValor(nombre2, exp);
			}
		}
		{ if(resultado >= exp) {resultado =  0;} } // Si resultado no es menor que el exp, es falso, 0
		|
		
		{
			//si el primer valor en la condicion es un id lo guardamos en la tabla de bools
			if (boolEsToken == 1 && insideWhile == 1)
			{
				if (variableLocal == 0)
				{
					nombre = TablaVariables.getKey(resultado);
				}
				else if (variableLocal == 1)
				{
					nombre = TablaVariablesLocal.getKey(resultado);
				}
				
				TablaBools.asignarValor(nombre, resultado);
			}
			else 
			{
				TablaBools.asignarValor(nombre, resultado);
			}
		}
		op = <TK_GT>	
		exp = Exp()
		{
			//si el segundo valor en la condicion es un id lo guardamos en la tabla de bools
			if (boolEsToken == 1 && insideWhile == 1)
			{
				if (variableLocal == 0)
				{
					nombre2 = TablaVariables.getKey(exp);
				}
				else if (variableLocal == 1)
				{
					nombre2 = TablaVariablesLocal.getKey(exp);
				}
				
				TablaBools.asignarValor(nombre2, exp);
			}
			else 
			{
				TablaBools.asignarValor(nombre2, exp);
			}
		}		
		{ if(resultado <= exp) {resultado =  0;} } // Si resultado no es mayor que el exp, es falso, 0
		|
		
		{
			//si el primer valor en la condicion es un id lo guardamos en la tabla de bools
			if (boolEsToken == 1 && insideWhile == 1)
			{
				if (variableLocal == 0)
				{
					nombre = TablaVariables.getKey(resultado);
				}
				else if (variableLocal == 1)
				{
					nombre = TablaVariablesLocal.getKey(resultado);
				}
				
				TablaBools.asignarValor(nombre, resultado);
			}
			else 
			{
				TablaBools.asignarValor(nombre, resultado);
			}
		}
		op = <TK_NE>	
		exp = Exp()
		{
			//si el segundo valor en la condicion es un id lo guardamos en la tabla de bools
			if (boolEsToken == 1 && insideWhile == 1)
			{
				if (variableLocal == 0)
				{
					nombre2 = TablaVariables.getKey(exp);
				}
				else if (variableLocal == 1)
				{
					nombre2 = TablaVariablesLocal.getKey(exp);
				}
				
				TablaBools.asignarValor(nombre2, exp);
			}
			else 
			{
				TablaBools.asignarValor(nombre2, exp);
			}
		}		
		{ if(resultado == exp) {resultado =  0;} } // Si resultado es igual que el exp, es falso, 0

	)?
	{return resultado;}
}

void Secuencia() : {}
{
	<TK_LBRACE> ( LOOKAHEAD(2) Funcion() | LOOKAHEAD(2) Func() | While() | Asignacion() | Condicion() )
	( <TK_COMMA> ( LOOKAHEAD(2) Funcion() | LOOKAHEAD(2) Func() | While() | Asignacion() | Condicion() ) )*
	<TK_RBRACE> 
	{variableLocal = 0;}
}

void While() : {Token token; int cond; int nom1Val; int nom2Val;}
{
	{insideWhile = 1;}
	<TK_WHILE> <TK_LPAR> cond = Bool() <TK_RPAR> 	
	{
		//ya que no es true ignora la secuencia
		if( cond == 0) { // Si la condición es falsa, 0, leer tokens hasta encontrar "}"

			token = getNextToken();

			while (!token.image.equals("}")) {
				token = getNextToken();
			}
        }
		else
		{
			while(cond != 0)
			{
				Secuencia();
				
				nom1Val = TablaBools.getValor(nombre);
				nom2Val = TablaBools.getValor(nombre2);
				System.out.println("Expresion 1 en bool vale " + nom1Val);
				System.out.println("Expresion 2 en bool vale " + nom2Val);
			
				if (op.equals("<"))
				{
					if (nom1Val >= nom2Val)
					{
						cond = 0;
					}
					else
					{
						cond = 1;
					}
				}
				else if (op.image.equals(">"))
				{
					if (nom1Val <= nom2Val)
					{
						cond = 0;
					}
					else
					{
						cond = 1;
					}
				}
				else if (op.equals("<>"))
				{
					if (nom1Val == nom2Val)
					{
						cond = 0;
					}
					else
					{
						cond = 1;
					}
				}
			}
		}				
		insideWhile = 0;	
	}		
}

void Definicion_Func() : {Token var; Token var2; Token var3; int cont;}
{
	<TK_FUNC> 
	var = <TK_ID> 
	<TK_LPAR>
	{cont = 0; variableLocal = 1; nombreFuncActual = var;}
	( 
		var2 = <TK_ID>
		{cont = 1;}
		( 
			<TK_COMMA> 
			var3 = <TK_ID>
			{cont = 2;}
			{ 
				if (cont == 2)
				{
					TablaFunciones.asignarFuncionDosParametros(var, var2, var3);
				}
			}				
		)* 
		{
			if (cont == 1)
			{
				TablaFunciones.asignarFuncionUnParametro(var, var2);
			}
		}
	)?
	<TK_RPAR> 
	{
		if(cont == 0)
		{
			TablaFunciones.asignarFuncionCeroParametros(var);
		}
	}
	Secuencia()
}

void Condicion() : {Token token; int cond;}
{
	<TK_IF> <TK_LPAR> cond = Bool() <TK_RPAR>
 
	{
		if( cond == 0) { // Si la condición es falsa, 0, leer tokens hasta encontrar "}"

			token = getNextToken();

			while (!token.image.equals("}")) {
				token = getNextToken();
			}
        }
        else {
        	Secuencia();
        }
	}
	
	(
		<TK_ELSE> { 
			if( cond != 0) { // Si la condición es verdad, no 0, leer tokens hasta encontrar "}"

				token = getNextToken();

			    while (!token.image.equals("}")) {
			    	token = getNextToken();
			    }
	        }
	        else {
	        	Secuencia();
	        }
		}
	)?
}

void Arreglo() : {Token var; int valor; int indice = 0;}
{
	<TK_ARR> var = <TK_ID> <TK_LBRACKET> valor = Exp() <TK_RBRACKET> 

	{
		// Se declara un arreglo anonimo del tamaño indicado entre brackets.
		// Se agrega a la hash table con el id especificado
		TablaVariables.declararArreglo(var, new int[valor]);
	}

	// Valores con los que se inicializa. opcional. Llama a las funciones de asignacion.
	(<TK_EQ> <TK_LPAR> valor = Exp() 
		{ 
			TablaVariables.asignarValorArreglo(var, valor, indice);
			indice++; 
		}

		(<TK_COMMA> valor = Exp() 
			{ 
				TablaVariables.asignarValorArreglo(var, valor, indice);
				indice++; 
			}
		)* 
		<TK_RPAR> 
	)?
}