/*
	MAGU Scanner/Parser
	Adrián Martínez A01280252
	Estefanía Guajardo A00813202
*/

// Para permitir el uso de variables y que los métodos no sean estáticos por default
options {
	STATIC = false ;
}


PARSER_BEGIN(magu)

import javax.swing.*; 

class magu
{
	public static void main(String[] args) throws ParseException
	{
		try
		{
			magu scanner = new magu(System.in);
			scanner.Programa();
			System.out.println("OK!");
		}
		catch(ParseException e)
		{
			System.out.println(e.getMessage());
			System.out.println("Error!");
		}
	}

	// Variable donde se guarda el valor de las expresiones
	int valorExp = 0;
}
PARSER_END(magu)

TOKEN:
{
		< TK_FORWARD : "forward" | "f" >		{}
	|	< TK_LEFT : "left" | "l" >				{}
	|	< TK_RIGHT : "right" | "r">				{}
	|	< TK_PENCILUP : "pencilup" | "pu" >		{}
	|	< TK_PENCILDOWN : "pencildown" | "pd" >	{}
	|	< TK_MOVE : "move" | "m" >				{}
	|	< TK_HOME : "home" | "h" >				{}
	|	< TK_CURVE : "curve" | "cv" >			{}
	|	< TK_INPUT : "input" | "in" >			{}
	|	< TK_PRINT : "print" | "pr" >			{}
	|	< TK_WHILE : "while" >					{}
	|	< TK_IF : "if" >						{}
	|	< TK_ELSE : "else" >					{}
	|	< TK_ARR : "arr" >						{}
	|	< TK_FUNC : "func" >					{}
	|	< TK_EQ: "=" >							{}
	|	< TK_NE: "<>" >							{}
	|	< TK_LT: "<" >							{}
	|	< TK_GT: ">" >							{}
	|	< TK_LPAR: "(" >						{}
	|	< TK_RPAR: ")" >						{}
	|	< TK_LBRACKET: "[" >					{}
	|	< TK_RBRACKET: "]" >					{}
	|	< TK_COMMA: "," >						{}
	|	< TK_PLUS: "+" >						{}
	|	< TK_MINUS: "-" >						{}
	|	< TK_MULT: "*" >						{}
	|	< TK_DIV: "/" >							{}	
	|	< TK_CTE_I : (["0"-"9"])+ >				{}
	|	< TK_ID :  ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","0"-"9"])* > {}
	|   < TK_STRING : <QUOTE> (~["\r","\n","\"" ])+ <QUOTE> > {}
	|	< #QUOTE : "\"" >
}

SKIP:
{
	" "	| "\r\n" | "\t"
}

void Programa() : {}
{   
    ( Asignacion() )* ( Definicion_Func() )* ( Arreglo() )* Secuencia()  <EOF>
}

void Func() : { Token t; String s, s2; }
{
    ( 
    	  <TK_FORWARD> <TK_LPAR> Exp() <TK_RPAR>
    	| <TK_LEFT> <TK_LPAR> Exp() <TK_RPAR>
    	| <TK_RIGHT> <TK_LPAR> Exp() <TK_RPAR>


    	| <TK_INPUT> <TK_LPAR> t = <TK_ID> <TK_RPAR>
    			{
    				// Crea un cuadro de dialogo. El input se guarda en la string s.
					s = (String)JOptionPane.showInputDialog(
			                    null, "Escribe el valor de " + t.image, "Input", JOptionPane.PLAIN_MESSAGE, null, null, null);

					// Si el campo quedo vacío o se cerró la ventana, mostrar mensaje de error y terminar ejecucion.
					if(s==null || s.trim().isEmpty()) {
						System.out.println("No se dio valor a la variable " + t.image);
						System.exit(0);
					}
					// De lo contrario asignar valor a variable.
					else {
						TablaVariables.asignarValor(t,  Integer.parseInt( s ) );
					}
				}

    	| <TK_PRINT> <TK_LPAR> 

    			( 
    			  t = <TK_ID> { s = String.valueOf(TablaVariables.getValor(t)); }
    			| t = <TK_STRING> {s = t.image.substring(1, t.image.length() - 1); } // Quitar las comillas
    			)
    			( <TK_PLUS> 
    				( t = <TK_ID> { s2 = String.valueOf(TablaVariables.getValor(t)); s = s + s2; }
    				| t = <TK_STRING> {s2 = t.image.substring(1, t.image.length() - 1); s = s + s2; }
    				) 
    			)*

    			<TK_RPAR>

    			{System.out.println(s);}

    	| <TK_PENCILUP> <TK_LPAR> <TK_RPAR>
    	| <TK_PENCILDOWN> <TK_LPAR> <TK_RPAR>
    	| <TK_MOVE> <TK_LPAR> Exp() <TK_COMMA> Exp() <TK_RPAR>
    	| <TK_CURVE> <TK_LPAR> Exp() <TK_COMMA> Exp() <TK_RPAR>
    	| <TK_HOME> <TK_LPAR> <TK_RPAR>
    )   
}  

void Funcion() : {} 
{	
    <TK_ID> <TK_LPAR> ( ( Exp() ) ( <TK_COMMA> Exp() )* )? <TK_RPAR>
}

int Exp() : {int resultado; int term;}
{
	resultado = Termino()
	( 
		 <TK_PLUS>
		 term = Termino()
		 {resultado += term;}
		
		| 

		<TK_MINUS>
		term = Termino()
		{resultado -= term;}

		)*
	{return resultado;}
}

int Termino() : {int resultado; int fact;}
{
	resultado = Factor()
	( 
		 <TK_MULT>
		 fact = Factor()
		 {resultado *= fact;}
		
		| 

		<TK_DIV>
		fact = Factor()
		{resultado /= fact;}

		)*
	{return resultado;}
}

int Factor() : {Token t;}
{
	// Si el token es variable, sacar su valor de la tabla
	t = <TK_ID>
	{return TablaVariables.getValor(t);}

	|

	<TK_LBRACKET> Exp() <TK_RBRACKET>

	|

	// Si es constante, hacer parse a entero
	t = <TK_CTE_I>
	{return Integer.parseInt( t.image );}
}


void Asignacion() : { Token var; int valor;}
{
	var = <TK_ID>
	<TK_EQ> 
	valor = Exp()

	{
		TablaVariables.asignarValor(var,valor);
	}

	// <TK_ID> ( <TK_LBRACKET> Exp() <TK_RBRACKET> )? <TK_EQ> Exp()
}


int Bool() : {int resultado; int exp;}
{
	resultado = Exp()
	( 
		<TK_LT>
		exp = Exp()
		{ if(resultado >= exp) {resultado =  0;} } // Si resultado no es menor que el exp, es falso, 0
		|
		<TK_GT>
		exp = Exp()
		{ if(resultado <= exp) {resultado =  0;} } // Si resultado no es mayor que el exp, es falso, 0
		|
		<TK_NE>
		exp = Exp()
		{ if(resultado == exp) {resultado =  0;} } // Si resultado es igual que el exp, es falso, 0

	)?

	{return resultado;}
}

void Secuencia() : {}
{
	<TK_LPAR> ( LOOKAHEAD(2) Funcion() | LOOKAHEAD(2) Func() | While() | Asignacion() | Condicion() )
	( <TK_COMMA> ( LOOKAHEAD(2) Funcion() | LOOKAHEAD(2) Func() | While() | Asignacion() | Condicion() ) )*
	<TK_RPAR> 
}

void While() : {}
{
	<TK_WHILE> <TK_LPAR> Bool() <TK_RPAR> Secuencia()
}

void Definicion_Func() : {Token var; Token var2; Token var3; int cont;}
{
	<TK_FUNC> 
	var = <TK_ID> 
	<TK_LPAR>
	{cont = 0;}
	( 
		var2 = <TK_ID>
		{cont = 1;}
		( 
			<TK_COMMA> 
			var3 = <TK_ID>
			{cont = 2;}
			{ 
				if (cont == 2)
				{
					TablaFunciones.asignarFuncionDosParametros(var, var2, var3);
				}
			}				
		)* 
		{
			if (cont == 1)
			{
				TablaFunciones.asignarFuncionUnParametro(var, var2);
			}
		}
	)?
	<TK_RPAR> 
	{
		if(cont == 0)
		{
			TablaFunciones.asignarFuncionCeroParametros(var);
		}
	}
	Secuencia()
}

void Condicion() : {}
{
	<TK_IF> <TK_LPAR> Bool() <TK_RPAR> Secuencia() (<TK_ELSE> Secuencia() )?
}

void Arreglo() : {}
{
	<TK_ARR> <TK_ID> <TK_LBRACKET> Exp() <TK_RBRACKET> (<TK_EQ> <TK_LPAR> Exp() (<TK_COMMA> Exp() )* <TK_RPAR> )?
}